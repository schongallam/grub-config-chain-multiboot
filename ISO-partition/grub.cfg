### Referential grub.cfg for config chain multiboot ###

## Template Entry ##
# copy, paste, and edit below, under "Boot ISO example entries"

#    menuentry "ISO Title Goes Here" {
#        set iso_path="/name-of-live-distro-goes-here.iso"
#        config_chain
#    }

# Your TODO list:
# [ ] install the new initial grub.cfg file (hint: the other grub.cfg file, not this file) on the ESP partition
# [ ] in the ESP partition grub.cfg file, replace __ROOTUUID__ with the UUID of the ISO partition
# [ ] save this file (the referential grub.cfg) to the ISO partition main directory
# [ ] update the `submenu` and `menuentry` items below to match your ISOs
# [ ] in this file, replace __HOSTUUID__ with the UUID of the host machine ESP partition (if desired)
# [ ] copy your ISOs to the ISO partition


## Globals ##

# rootuuid exported from first grub.cfg
search --no-floppy --fs-uuid --set=root $rootuuid

set timeout=-1

# Squash a potential bug in grub 2.04
#rmmod tpm


## Functions ##

function about {
	echo -e "GRUB config-chain multiboot, by Malcolm Schongalla, 2024"
	echo -e "Released under the GPLv3 license"
    echo -e "                             -"
    echo -e "This config file should be edited to include each new ISO."
    echo -e "Copy and paste a correspondingtemplate menuentry, and change"
    echo -e "the \$iso_path to point to the newly added ISO."
    echo -e "                             -"
    echo -e "If any ISOs load but fail to find a filesystem, check the"
    echo -e "ISO's native grub.cfg for ISO-supporting kernel arguments,"
    echo -e "such as \"findiso=\$iso_path\" or \"iso-scan/filename=\${iso_path}\""
    echo -e "Manually add \"findiso=\$iso_path\" to the kernel line,"
    echo -e "remove references to FSUUID, and remove 'live-media' arguments."
    echo -e "                             -"
    echo -e "rootuuid = $rootuuid"
    echo -e "root = $root"
    echo -e "prefix = $prefix"
    echo -e "                             -"
    echo -e "Press ENTER to continue"
    read hit_enter
}

function search_for_file {
    set device=$1
    set filename=$2
    for path in "/boot/grub/" \
                "/EFI/BOOT/" \
                "/EFI/debian/" \
                "/EFI/debian/grub/"; do
        set fullpath=$path$filename
        if [ -f ($device)$fullpath ]; then
            return 0
        fi
    done
    set fullpath=""
    set path=""
    return 1
}

function config_chain {
    loopback loop ($root)$iso_path

    search_for_file loop grub.cfg

    if [ $1 = 1 ]; then
        echo "[config_chain] Unable to find config file"
        return 1
    else
        set root=(loop)
        set prefix=$path # set by search_for_file
        export iso_path
        configfile $prefix/grub.cfg
    fi
    loopback --delete loop
    return 0
}

#EFI autodetection adapted from artix-mate-s6-20230814-x86_64.iso://boot/grub/grub.cfg
function efi_detect {
    if [ "${grub_platform}" = "efi" ]; then

        submenu --class=find.efi "Detect EFI bootloaders ->" {
            set menu_color_normal=white/black
            set menu_color_highlight=white/green
            efi_found=false

            for efi in (*,gpt*)/efi/*/*.efi (*,gpt*)/efi/*/*/*.efi (*,gpt*)/*.efi (*,gpt*)/*/*.efi ; do
                regexp --set=1:efi_device '^\((.*)\)/' "${efi}"
                if [ -e "${efi}" ]; then
                    efi_found=true

                    menuentry --class=efi "${efi}" "${efi_device}" {
                        set menu_color_normal=white/black
                        set menu_color_highlight=white/green

                        root="${2}"
                        chainloader "${1}"
                    }
                fi
            done

            if [ "${efi_found}" != true ]; then
                echo "[efi_detect] Sorry, no EFI files detected."
                echo "Press ENTER to continue"
                read hit_enter
            fi
        }
    fi
}


## Menu Entries ##

set menu_color_normal=white/black
set menu_color_highlight=white/green

menuentry "About config-chain multiboot" {
    about
}

# Boot ISOs #

submenu "Debian-based ->" {
    set menu_color_normal=white/black
    set menu_color_highlight=white/green

    menuentry "Linux Mint 22 MATE 64-bit" {
        set iso_path="/linuxmint-22-mate-64bit.iso"
        config_chain
    }

    menuentry "ParrotOS (Security Edition) 6.1 (no loopback delete)" {
        set iso_path="/Parrot-security-6.1_amd64.iso"
        config_chain
    }
}
    
submenu "Arch-based ->" {
    set menu_color_normal=white/black
    set menu_color_highlight=white/green

    menuentry "Artix MATE S6 64-bit 20230814" {
        set iso_path="/artix-mate-s6-20230814-x86_64.iso"
        config_chain
    }

    menuentry "Manjaro Xfce 21.0" {
        set iso_path="/manjaro-xfce-21.0-210318-linux510.iso"
        config_chain
    }
}

submenu "openSUSE-based ->" {
    set menu_color_normal=white/black
    set menu_color_highlight=white/green

    menuentry "openSUSE Tumbleweed 202408120 x86_64" {
        set iso_path="/openSUSE-Tumbleweed-DVD-x86_64-Snapshot20240820-Media.iso"
        config_chain
    }
}

# Other Boot Options #

efi_detect

menuentry "Reboot" {
    reboot
}
